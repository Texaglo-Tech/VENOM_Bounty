{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HighloadWalletV2 = void 0;\nconst everscale_inpage_provider_1 = require(\"everscale-inpage-provider\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst core_1 = __importDefault(require(\"../../core\"));\nconst utils_1 = require(\"../utils\");\nconst {\n  ensureNekotonLoaded,\n  nekoton\n} = core_1.default;\n/**\n * @category AccountsStorage\n */\nclass HighloadWalletV2 {\n  static async computeAddress(args) {\n    // TODO: Somehow propagate init params\n    await ensureNekotonLoaded();\n    const publicKey = args.publicKey instanceof bignumber_js_1.default ? args.publicKey : new bignumber_js_1.default(`0x${args.publicKey}`);\n    const hash = makeStateInit(publicKey).hash;\n    return new everscale_inpage_provider_1.Address(`${args.workchain != null ? args.workchain : 0}:${hash}`);\n  }\n  static async fromPubkey(args) {\n    const publicKey = new bignumber_js_1.default(`0x${args.publicKey}`);\n    const address = await HighloadWalletV2.computeAddress({\n      publicKey,\n      workchain: args.workchain\n    });\n    const result = new HighloadWalletV2(address);\n    result.publicKey = publicKey;\n    return result;\n  }\n  constructor(address) {\n    this.address = (0, utils_1.convertToAddressObject)(address);\n  }\n  async fetchPublicKey(ctx) {\n    let publicKey = this.publicKey;\n    if (publicKey == null) {\n      publicKey = this.publicKey = await ctx.fetchPublicKey(this.address).then(publicKey => new bignumber_js_1.default(`0x${publicKey}`));\n    }\n    return publicKey.toString(16).padStart(64, '0');\n  }\n  async prepareMessage(args, ctx) {\n    const {\n      publicKey,\n      stateInit\n    } = await this.fetchState(ctx);\n    const signer = await ctx.getSigner(publicKey);\n    const expireAt = ctx.nowSec + args.timeout;\n    const attachedPayload = args.payload ? ctx.encodeInternalInput(args.payload) : undefined;\n    const internalMessage = ctx.encodeInternalMessage({\n      dst: args.recipient,\n      bounce: args.bounce,\n      stateInit: args.stateInit,\n      body: attachedPayload,\n      amount: args.amount\n    });\n    const params = {\n      messages: [[0, {\n        flags: 3,\n        message: internalMessage\n      }]]\n    };\n    const {\n      boc: messages,\n      hash: messagesHash\n    } = ctx.packIntoCell({\n      structure: MESSAGES_STRUCTURE,\n      data: params\n    });\n    params.walletId = WALLET_ID;\n    params.expireAt = expireAt;\n    params.messagesHash = `0x${messagesHash.slice(-8)}`;\n    const hash = ctx.packIntoCell({\n      structure: UNSIGNED_TRANSFER_STRUCTURE,\n      data: params\n    }).hash;\n    const signature = await signer.sign(hash, args.signatureId);\n    const {\n      signatureParts\n    } = ctx.extendSignature(signature);\n    params.signatureHigh = signatureParts.high;\n    params.signatureLow = signatureParts.low;\n    const signedPayload = ctx.packIntoCell({\n      structure: SIGNED_TRANSFER_STRUCTURE,\n      data: params\n    }).boc;\n    return ctx.createRawExternalMessage({\n      address: this.address.toString(),\n      body: signedPayload,\n      stateInit,\n      expireAt\n    });\n  }\n  async fetchState(ctx) {\n    let stateInit = undefined;\n    let publicKey;\n    const state = await ctx.getFullContractState(this.address);\n    if (state == null || !state.isDeployed) {\n      if (this.publicKey == null) {\n        throw new Error('Contract not deployed and public key was not specified');\n      }\n      stateInit = makeStateInit(this.publicKey).boc;\n      publicKey = this.publicKey;\n    } else if (this.publicKey == null) {\n      const data = ctx.extractContractData(state.boc);\n      if (data == null) {\n        throw new Error('Failed to extract contract data');\n      }\n      publicKey = parseInitData(ctx, data).publicKey;\n    } else {\n      publicKey = this.publicKey;\n    }\n    if (this.publicKey == null) {\n      this.publicKey = publicKey;\n    }\n    return {\n      publicKey: publicKey.toString(16).padStart(64, '0'),\n      stateInit\n    };\n  }\n}\nexports.HighloadWalletV2 = HighloadWalletV2;\nconst parseInitData = (ctx, boc) => {\n  const parsed = ctx.unpackFromCell({\n    structure: DATA_STRUCTURE,\n    boc,\n    allowPartial: true\n  });\n  if (typeof parsed !== 'object' || typeof parsed['publicKey'] !== 'string') {\n    throw new Error('Invalid contract data');\n  }\n  return {\n    publicKey: new bignumber_js_1.default(parsed.publicKey)\n  };\n};\nconst makeStateInit = publicKey => {\n  const data = nekoton.packIntoCell(DATA_STRUCTURE, {\n    walletId: WALLET_ID,\n    lastCleaned: 0,\n    publicKey: publicKey.toFixed(0),\n    queries: false\n  }).boc;\n  return nekoton.mergeTvc(HIGHLOAD_WALLET_V2_CODE, data);\n};\nconst MESSAGES_STRUCTURE = [{\n  name: 'messages',\n  type: 'map(uint16,tuple)',\n  components: [{\n    name: 'flags',\n    type: 'uint8'\n  }, {\n    name: 'message',\n    type: 'cell'\n  }]\n}];\nconst UNSIGNED_TRANSFER_STRUCTURE = [{\n  name: 'walletId',\n  type: 'uint32'\n}, {\n  name: 'expireAt',\n  type: 'uint32'\n}, {\n  name: 'messagesHash',\n  type: 'uint32'\n}, ...MESSAGES_STRUCTURE];\nconst SIGNED_TRANSFER_STRUCTURE = [{\n  name: 'signatureHigh',\n  type: 'uint256'\n}, {\n  name: 'signatureLow',\n  type: 'uint256'\n}, ...UNSIGNED_TRANSFER_STRUCTURE];\nconst DATA_STRUCTURE = [{\n  name: 'walletId',\n  type: 'uint32'\n}, {\n  name: 'lastCleaned',\n  type: 'uint64'\n}, {\n  name: 'publicKey',\n  type: 'uint256'\n}, {\n  name: 'queries',\n  type: 'bool'\n}];\nconst HIGHLOAD_WALLET_V2_CODE = 'te6ccgEBCQEA5QABFP8A9KQT9LzyyAsBAgEgBAIB6vKDCNcYINMf0z/4I6ofUyC58mPtRNDTH9M/0//0BNFTYIBA9A5voTHyYFFzuvKiB/kBVBCH+RDyowL0BNH4AH+OFiGAEPR4b6UgmALTB9QwAfsAkTLiAbPmW4MlochANIBA9EOK5jHIEssfE8s/y//0AMntVAMANCCAQPSWb6UyURCUMFMDud4gkzM2AZIyMOKzAgFICAUCASAHBgBBvl+XaiaGmPmOmf6f+Y+gJoqRBAIHoHN9CYyS2/yV3R8UABe9nOdqJoaa+Y64X/wABNAw';\nconst WALLET_ID = 0;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","HighloadWalletV2","everscale_inpage_provider_1","require","bignumber_js_1","core_1","utils_1","ensureNekotonLoaded","nekoton","default","computeAddress","args","publicKey","hash","makeStateInit","Address","workchain","fromPubkey","address","result","constructor","convertToAddressObject","fetchPublicKey","ctx","then","toString","padStart","prepareMessage","stateInit","fetchState","signer","getSigner","expireAt","nowSec","timeout","attachedPayload","payload","encodeInternalInput","undefined","internalMessage","encodeInternalMessage","dst","recipient","bounce","body","amount","params","messages","flags","message","boc","messagesHash","packIntoCell","structure","MESSAGES_STRUCTURE","data","walletId","WALLET_ID","slice","UNSIGNED_TRANSFER_STRUCTURE","signature","sign","signatureId","signatureParts","extendSignature","signatureHigh","high","signatureLow","low","signedPayload","SIGNED_TRANSFER_STRUCTURE","createRawExternalMessage","state","getFullContractState","isDeployed","Error","extractContractData","parseInitData","parsed","unpackFromCell","DATA_STRUCTURE","allowPartial","lastCleaned","toFixed","queries","mergeTvc","HIGHLOAD_WALLET_V2_CODE","name","type","components"],"sources":["/home/king/Desktop/venom-connect-main/examples/react/node_modules/everscale-standalone-client/client/AccountsStorage/HighloadWalletV2.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HighloadWalletV2 = void 0;\nconst everscale_inpage_provider_1 = require(\"everscale-inpage-provider\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst core_1 = __importDefault(require(\"../../core\"));\nconst utils_1 = require(\"../utils\");\nconst { ensureNekotonLoaded, nekoton } = core_1.default;\n/**\n * @category AccountsStorage\n */\nclass HighloadWalletV2 {\n    static async computeAddress(args) {\n        // TODO: Somehow propagate init params\n        await ensureNekotonLoaded();\n        const publicKey = args.publicKey instanceof bignumber_js_1.default ? args.publicKey : new bignumber_js_1.default(`0x${args.publicKey}`);\n        const hash = makeStateInit(publicKey).hash;\n        return new everscale_inpage_provider_1.Address(`${args.workchain != null ? args.workchain : 0}:${hash}`);\n    }\n    static async fromPubkey(args) {\n        const publicKey = new bignumber_js_1.default(`0x${args.publicKey}`);\n        const address = await HighloadWalletV2.computeAddress({ publicKey, workchain: args.workchain });\n        const result = new HighloadWalletV2(address);\n        result.publicKey = publicKey;\n        return result;\n    }\n    constructor(address) {\n        this.address = (0, utils_1.convertToAddressObject)(address);\n    }\n    async fetchPublicKey(ctx) {\n        let publicKey = this.publicKey;\n        if (publicKey == null) {\n            publicKey = this.publicKey = await ctx\n                .fetchPublicKey(this.address)\n                .then(publicKey => new bignumber_js_1.default(`0x${publicKey}`));\n        }\n        return publicKey.toString(16).padStart(64, '0');\n    }\n    async prepareMessage(args, ctx) {\n        const { publicKey, stateInit } = await this.fetchState(ctx);\n        const signer = await ctx.getSigner(publicKey);\n        const expireAt = ctx.nowSec + args.timeout;\n        const attachedPayload = args.payload ? ctx.encodeInternalInput(args.payload) : undefined;\n        const internalMessage = ctx.encodeInternalMessage({\n            dst: args.recipient,\n            bounce: args.bounce,\n            stateInit: args.stateInit,\n            body: attachedPayload,\n            amount: args.amount,\n        });\n        const params = {\n            messages: [\n                [\n                    0,\n                    {\n                        flags: 3,\n                        message: internalMessage,\n                    },\n                ],\n            ],\n        };\n        const { boc: messages, hash: messagesHash } = ctx.packIntoCell({ structure: MESSAGES_STRUCTURE, data: params });\n        params.walletId = WALLET_ID;\n        params.expireAt = expireAt;\n        params.messagesHash = `0x${messagesHash.slice(-8)}`;\n        const hash = ctx.packIntoCell({ structure: UNSIGNED_TRANSFER_STRUCTURE, data: params }).hash;\n        const signature = await signer.sign(hash, args.signatureId);\n        const { signatureParts } = ctx.extendSignature(signature);\n        params.signatureHigh = signatureParts.high;\n        params.signatureLow = signatureParts.low;\n        const signedPayload = ctx.packIntoCell({ structure: SIGNED_TRANSFER_STRUCTURE, data: params }).boc;\n        return ctx.createRawExternalMessage({\n            address: this.address.toString(),\n            body: signedPayload,\n            stateInit,\n            expireAt,\n        });\n    }\n    async fetchState(ctx) {\n        let stateInit = undefined;\n        let publicKey;\n        const state = await ctx.getFullContractState(this.address);\n        if (state == null || !state.isDeployed) {\n            if (this.publicKey == null) {\n                throw new Error('Contract not deployed and public key was not specified');\n            }\n            stateInit = makeStateInit(this.publicKey).boc;\n            publicKey = this.publicKey;\n        }\n        else if (this.publicKey == null) {\n            const data = ctx.extractContractData(state.boc);\n            if (data == null) {\n                throw new Error('Failed to extract contract data');\n            }\n            publicKey = parseInitData(ctx, data).publicKey;\n        }\n        else {\n            publicKey = this.publicKey;\n        }\n        if (this.publicKey == null) {\n            this.publicKey = publicKey;\n        }\n        return {\n            publicKey: publicKey.toString(16).padStart(64, '0'),\n            stateInit,\n        };\n    }\n}\nexports.HighloadWalletV2 = HighloadWalletV2;\nconst parseInitData = (ctx, boc) => {\n    const parsed = ctx.unpackFromCell({ structure: DATA_STRUCTURE, boc, allowPartial: true });\n    if (typeof parsed !== 'object' || typeof parsed['publicKey'] !== 'string') {\n        throw new Error('Invalid contract data');\n    }\n    return {\n        publicKey: new bignumber_js_1.default(parsed.publicKey),\n    };\n};\nconst makeStateInit = (publicKey) => {\n    const data = nekoton.packIntoCell(DATA_STRUCTURE, {\n        walletId: WALLET_ID,\n        lastCleaned: 0,\n        publicKey: publicKey.toFixed(0),\n        queries: false,\n    }).boc;\n    return nekoton.mergeTvc(HIGHLOAD_WALLET_V2_CODE, data);\n};\nconst MESSAGES_STRUCTURE = [\n    {\n        name: 'messages',\n        type: 'map(uint16,tuple)',\n        components: [\n            { name: 'flags', type: 'uint8' },\n            { name: 'message', type: 'cell' },\n        ],\n    },\n];\nconst UNSIGNED_TRANSFER_STRUCTURE = [\n    { name: 'walletId', type: 'uint32' },\n    { name: 'expireAt', type: 'uint32' },\n    { name: 'messagesHash', type: 'uint32' },\n    ...MESSAGES_STRUCTURE,\n];\nconst SIGNED_TRANSFER_STRUCTURE = [\n    { name: 'signatureHigh', type: 'uint256' },\n    { name: 'signatureLow', type: 'uint256' },\n    ...UNSIGNED_TRANSFER_STRUCTURE,\n];\nconst DATA_STRUCTURE = [\n    { name: 'walletId', type: 'uint32' },\n    { name: 'lastCleaned', type: 'uint64' },\n    { name: 'publicKey', type: 'uint256' },\n    { name: 'queries', type: 'bool' },\n];\nconst HIGHLOAD_WALLET_V2_CODE = 'te6ccgEBCQEA5QABFP8A9KQT9LzyyAsBAgEgBAIB6vKDCNcYINMf0z/4I6ofUyC58mPtRNDTH9M/0//0BNFTYIBA9A5voTHyYFFzuvKiB/kBVBCH+RDyowL0BNH4AH+OFiGAEPR4b6UgmALTB9QwAfsAkTLiAbPmW4MlochANIBA9EOK5jHIEssfE8s/y//0AMntVAMANCCAQPSWb6UyURCUMFMDud4gkzM2AZIyMOKzAgFICAUCASAHBgBBvl+XaiaGmPmOmf6f+Y+gJoqRBAIHoHN9CYyS2/yV3R8UABe9nOdqJoaa+Y64X/wABNAw';\nconst WALLET_ID = 0;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}