{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletV3Account = void 0;\nconst everscale_inpage_provider_1 = require(\"everscale-inpage-provider\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst core_1 = __importDefault(require(\"../../core\"));\nconst {\n  ensureNekotonLoaded,\n  nekoton\n} = core_1.default;\n/**\n * @category AccountsStorage\n */\nclass WalletV3Account {\n  static async computeAddress(args) {\n    // TODO: Somehow propagate init params\n    await ensureNekotonLoaded();\n    const publicKey = args.publicKey instanceof bignumber_js_1.default ? args.publicKey : new bignumber_js_1.default(`0x${args.publicKey}`);\n    const hash = makeStateInit(publicKey).hash;\n    return new everscale_inpage_provider_1.Address(`${args.workchain != null ? args.workchain : 0}:${hash}`);\n  }\n  static async fromPubkey(args) {\n    const publicKey = new bignumber_js_1.default(`0x${args.publicKey}`);\n    const address = await WalletV3Account.computeAddress({\n      publicKey,\n      workchain: args.workchain\n    });\n    const result = new WalletV3Account(address);\n    result.publicKey = publicKey;\n    return result;\n  }\n  constructor(address) {\n    this.address = address;\n  }\n  async fetchPublicKey(ctx) {\n    let publicKey = this.publicKey;\n    if (publicKey == null) {\n      publicKey = this.publicKey = await ctx.fetchPublicKey(this.address).then(publicKey => new bignumber_js_1.default(`0x${publicKey}`));\n    }\n    return publicKey.toString(16).padStart(64, '0');\n  }\n  async prepareMessage(args, ctx) {\n    const {\n      seqno,\n      publicKey,\n      stateInit\n    } = await this.fetchState(ctx);\n    const signer = await ctx.getSigner(publicKey);\n    const expireAt = ctx.nowSec + args.timeout;\n    const attachedPayload = args.payload ? ctx.encodeInternalInput(args.payload) : undefined;\n    const internalMessage = ctx.encodeInternalMessage({\n      dst: args.recipient,\n      bounce: args.bounce,\n      stateInit: args.stateInit,\n      body: attachedPayload,\n      amount: args.amount\n    });\n    const params = {\n      walletId: WALLET_ID,\n      expireAt,\n      seqno,\n      flags: 3,\n      message: internalMessage\n    };\n    const hash = ctx.packIntoCell({\n      structure: UNSIGNED_TRANSFER_STRUCTURE,\n      data: params\n    }).hash;\n    const signature = await signer.sign(hash, args.signatureId);\n    const {\n      signatureParts\n    } = ctx.extendSignature(signature);\n    params.signatureHigh = signatureParts.high;\n    params.signatureLow = signatureParts.low;\n    const signedPayload = ctx.packIntoCell({\n      structure: SIGNED_TRANSFER_STRUCTURE,\n      data: params\n    }).boc;\n    return ctx.createRawExternalMessage({\n      address: this.address,\n      body: signedPayload,\n      stateInit,\n      expireAt\n    });\n  }\n  async fetchState(ctx) {\n    let stateInit = undefined;\n    let result;\n    const state = await ctx.getFullContractState(this.address);\n    if (state == null || !state.isDeployed) {\n      if (this.publicKey == null) {\n        throw new Error('Contract not deployed and public key was not specified');\n      }\n      stateInit = makeStateInit(this.publicKey).boc;\n      result = {\n        seqno: 0,\n        publicKey: this.publicKey\n      };\n    } else {\n      const data = ctx.extractContractData(state.boc);\n      if (data == null) {\n        throw new Error('Failed to extract contract data');\n      }\n      result = parseInitData(ctx, data);\n    }\n    if (this.publicKey == null) {\n      this.publicKey = result.publicKey;\n    } else if (!this.publicKey.eq(result.publicKey)) {\n      throw new Error('Public key mismatch');\n    }\n    return {\n      seqno: result.seqno,\n      publicKey: result.publicKey.toString(16).padStart(64, '0'),\n      stateInit\n    };\n  }\n}\nexports.WalletV3Account = WalletV3Account;\nconst parseInitData = (ctx, boc) => {\n  const parsed = ctx.unpackFromCell({\n    structure: DATA_STRUCTURE,\n    boc,\n    allowPartial: false\n  });\n  if (typeof parsed !== 'object' || typeof parsed['seqno'] !== 'string' || typeof parsed['publicKey'] !== 'string') {\n    throw new Error('Invalid contract data ');\n  }\n  return {\n    seqno: parseInt(parsed.seqno),\n    publicKey: new bignumber_js_1.default(parsed.publicKey)\n  };\n};\nconst makeStateInit = publicKey => {\n  const data = nekoton.packIntoCell(DATA_STRUCTURE, {\n    seqno: 0,\n    walletId: WALLET_ID,\n    publicKey: publicKey.toFixed(0)\n  }).boc;\n  return nekoton.mergeTvc(WALLET_V3_CODE, data);\n};\nconst UNSIGNED_TRANSFER_STRUCTURE = [{\n  name: 'walletId',\n  type: 'uint32'\n}, {\n  name: 'expireAt',\n  type: 'uint32'\n}, {\n  name: 'seqno',\n  type: 'uint32'\n}, {\n  name: 'flags',\n  type: 'uint8'\n}, {\n  name: 'message',\n  type: 'cell'\n}];\nconst SIGNED_TRANSFER_STRUCTURE = [{\n  name: 'signatureHigh',\n  type: 'uint256'\n}, {\n  name: 'signatureLow',\n  type: 'uint256'\n}, ...UNSIGNED_TRANSFER_STRUCTURE];\nconst DATA_STRUCTURE = [{\n  name: 'seqno',\n  type: 'uint32'\n}, {\n  name: 'walletId',\n  type: 'uint32'\n}, {\n  name: 'publicKey',\n  type: 'uint256'\n}];\nconst WALLET_V3_CODE = 'te6ccgEBAQEAcQAA3v8AIN0gggFMl7ohggEznLqxn3Gw7UTQ0x/THzHXC//jBOCk8mCDCNcYINMf0x/TH/gjE7vyY+1E0NMf0x/T/9FRMrryoVFEuvKiBPkBVBBV+RDyo/gAkyDXSpbTB9QC+wDo0QGkyMsfyx/L/8ntVA==';\nconst WALLET_ID = 0x4ba92d8a;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","WalletV3Account","everscale_inpage_provider_1","require","bignumber_js_1","core_1","ensureNekotonLoaded","nekoton","default","computeAddress","args","publicKey","hash","makeStateInit","Address","workchain","fromPubkey","address","result","constructor","fetchPublicKey","ctx","then","toString","padStart","prepareMessage","seqno","stateInit","fetchState","signer","getSigner","expireAt","nowSec","timeout","attachedPayload","payload","encodeInternalInput","undefined","internalMessage","encodeInternalMessage","dst","recipient","bounce","body","amount","params","walletId","WALLET_ID","flags","message","packIntoCell","structure","UNSIGNED_TRANSFER_STRUCTURE","data","signature","sign","signatureId","signatureParts","extendSignature","signatureHigh","high","signatureLow","low","signedPayload","SIGNED_TRANSFER_STRUCTURE","boc","createRawExternalMessage","state","getFullContractState","isDeployed","Error","extractContractData","parseInitData","eq","parsed","unpackFromCell","DATA_STRUCTURE","allowPartial","parseInt","toFixed","mergeTvc","WALLET_V3_CODE","name","type"],"sources":["/home/king/Desktop/venom-connect-main/examples/react/node_modules/everscale-standalone-client/client/AccountsStorage/WalletV3.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletV3Account = void 0;\nconst everscale_inpage_provider_1 = require(\"everscale-inpage-provider\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst core_1 = __importDefault(require(\"../../core\"));\nconst { ensureNekotonLoaded, nekoton } = core_1.default;\n/**\n * @category AccountsStorage\n */\nclass WalletV3Account {\n    static async computeAddress(args) {\n        // TODO: Somehow propagate init params\n        await ensureNekotonLoaded();\n        const publicKey = args.publicKey instanceof bignumber_js_1.default ? args.publicKey : new bignumber_js_1.default(`0x${args.publicKey}`);\n        const hash = makeStateInit(publicKey).hash;\n        return new everscale_inpage_provider_1.Address(`${args.workchain != null ? args.workchain : 0}:${hash}`);\n    }\n    static async fromPubkey(args) {\n        const publicKey = new bignumber_js_1.default(`0x${args.publicKey}`);\n        const address = await WalletV3Account.computeAddress({ publicKey, workchain: args.workchain });\n        const result = new WalletV3Account(address);\n        result.publicKey = publicKey;\n        return result;\n    }\n    constructor(address) {\n        this.address = address;\n    }\n    async fetchPublicKey(ctx) {\n        let publicKey = this.publicKey;\n        if (publicKey == null) {\n            publicKey = this.publicKey = await ctx\n                .fetchPublicKey(this.address)\n                .then(publicKey => new bignumber_js_1.default(`0x${publicKey}`));\n        }\n        return publicKey.toString(16).padStart(64, '0');\n    }\n    async prepareMessage(args, ctx) {\n        const { seqno, publicKey, stateInit } = await this.fetchState(ctx);\n        const signer = await ctx.getSigner(publicKey);\n        const expireAt = ctx.nowSec + args.timeout;\n        const attachedPayload = args.payload ? ctx.encodeInternalInput(args.payload) : undefined;\n        const internalMessage = ctx.encodeInternalMessage({\n            dst: args.recipient,\n            bounce: args.bounce,\n            stateInit: args.stateInit,\n            body: attachedPayload,\n            amount: args.amount,\n        });\n        const params = {\n            walletId: WALLET_ID,\n            expireAt,\n            seqno,\n            flags: 3,\n            message: internalMessage,\n        };\n        const hash = ctx.packIntoCell({ structure: UNSIGNED_TRANSFER_STRUCTURE, data: params }).hash;\n        const signature = await signer.sign(hash, args.signatureId);\n        const { signatureParts } = ctx.extendSignature(signature);\n        params.signatureHigh = signatureParts.high;\n        params.signatureLow = signatureParts.low;\n        const signedPayload = ctx.packIntoCell({\n            structure: SIGNED_TRANSFER_STRUCTURE,\n            data: params,\n        }).boc;\n        return ctx.createRawExternalMessage({\n            address: this.address,\n            body: signedPayload,\n            stateInit,\n            expireAt,\n        });\n    }\n    async fetchState(ctx) {\n        let stateInit = undefined;\n        let result;\n        const state = await ctx.getFullContractState(this.address);\n        if (state == null || !state.isDeployed) {\n            if (this.publicKey == null) {\n                throw new Error('Contract not deployed and public key was not specified');\n            }\n            stateInit = makeStateInit(this.publicKey).boc;\n            result = { seqno: 0, publicKey: this.publicKey };\n        }\n        else {\n            const data = ctx.extractContractData(state.boc);\n            if (data == null) {\n                throw new Error('Failed to extract contract data');\n            }\n            result = parseInitData(ctx, data);\n        }\n        if (this.publicKey == null) {\n            this.publicKey = result.publicKey;\n        }\n        else if (!this.publicKey.eq(result.publicKey)) {\n            throw new Error('Public key mismatch');\n        }\n        return {\n            seqno: result.seqno,\n            publicKey: result.publicKey.toString(16).padStart(64, '0'),\n            stateInit,\n        };\n    }\n}\nexports.WalletV3Account = WalletV3Account;\nconst parseInitData = (ctx, boc) => {\n    const parsed = ctx.unpackFromCell({\n        structure: DATA_STRUCTURE,\n        boc,\n        allowPartial: false,\n    });\n    if (typeof parsed !== 'object' || typeof parsed['seqno'] !== 'string' || typeof parsed['publicKey'] !== 'string') {\n        throw new Error('Invalid contract data ');\n    }\n    return {\n        seqno: parseInt(parsed.seqno),\n        publicKey: new bignumber_js_1.default(parsed.publicKey),\n    };\n};\nconst makeStateInit = (publicKey) => {\n    const data = nekoton.packIntoCell(DATA_STRUCTURE, {\n        seqno: 0,\n        walletId: WALLET_ID,\n        publicKey: publicKey.toFixed(0),\n    }).boc;\n    return nekoton.mergeTvc(WALLET_V3_CODE, data);\n};\nconst UNSIGNED_TRANSFER_STRUCTURE = [\n    { name: 'walletId', type: 'uint32' },\n    { name: 'expireAt', type: 'uint32' },\n    { name: 'seqno', type: 'uint32' },\n    { name: 'flags', type: 'uint8' },\n    { name: 'message', type: 'cell' },\n];\nconst SIGNED_TRANSFER_STRUCTURE = [\n    { name: 'signatureHigh', type: 'uint256' },\n    { name: 'signatureLow', type: 'uint256' },\n    ...UNSIGNED_TRANSFER_STRUCTURE,\n];\nconst DATA_STRUCTURE = [\n    { name: 'seqno', type: 'uint32' },\n    { name: 'walletId', type: 'uint32' },\n    { name: 'publicKey', type: 'uint256' },\n];\nconst WALLET_V3_CODE = 'te6ccgEBAQEAcQAA3v8AIN0gggFMl7ohggEznLqxn3Gw7UTQ0x/THzHXC//jBOCk8mCDCNcYINMf0x/TH/gjE7vyY+1E0NMf0x/T/9FRMrryoVFEuvKiBPkBVBBV+RDyo/gAkyDXSpbTB9QC+wDo0QGkyMsfyx/L/8ntVA==';\nconst WALLET_ID = 0x4ba92d8a;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}