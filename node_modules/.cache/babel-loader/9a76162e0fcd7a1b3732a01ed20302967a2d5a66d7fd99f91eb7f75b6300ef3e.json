{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionController = exports.createConnectionController = exports.ConnectionError = exports.checkConnection = exports.NETWORK_PRESETS = void 0;\nconst await_semaphore_1 = require(\"@broxus/await-semaphore\");\nconst core_1 = __importDefault(require(\"../../core\"));\nconst gql_1 = require(\"./gql\");\nconst jrpc_1 = require(\"./jrpc\");\nconst {\n  nekoton,\n  debugLog\n} = core_1.default;\n/**\n * @category Client\n */\nexports.NETWORK_PRESETS = {\n  mainnetJrpc: {\n    id: 1,\n    type: 'jrpc',\n    data: {\n      endpoint: 'https://jrpc.everwallet.net/rpc'\n    }\n  },\n  fld: {\n    id: 10,\n    type: 'graphql',\n    data: {\n      endpoints: ['gql.custler.net'],\n      local: false\n    }\n  },\n  local: {\n    id: 31337,\n    type: 'graphql',\n    data: {\n      endpoints: ['127.0.0.1'],\n      local: true\n    }\n  }\n};\nconst matchNetworkGroup = id => {\n  switch (id) {\n    case 1:\n      return 'mainnet';\n    case 2:\n      return 'testnet';\n    case 10:\n      return 'fld';\n    case 31337:\n      return 'localnet';\n    default:\n      return `network${id}`;\n  }\n};\nfunction loadPreset(params) {\n  if (typeof params === 'string') {\n    const targetPreset = exports.NETWORK_PRESETS[params];\n    if (targetPreset == null) {\n      throw new Error(`Target preset id not found: ${params}`);\n    }\n    return targetPreset;\n  } else {\n    return params;\n  }\n}\n/**\n * Tries to connect with the specified params. Throws an exception in case of error\n *\n * @category Client\n * @throws ConnectionError\n */\nasync function checkConnection(params) {\n  const preset = loadPreset(params);\n  const clock = new nekoton.ClockWithOffset();\n  try {\n    const controller = new ConnectionController(clock);\n    await controller['_connect'](preset);\n    if (controller['_initializedTransport'] != null) {\n      cleanupInitializedTransport(controller['_initializedTransport']);\n    }\n  } catch (e) {\n    throw new ConnectionError(preset, e.toString());\n  } finally {\n    clock.free();\n  }\n}\nexports.checkConnection = checkConnection;\n/**\n * @category Client\n */\nclass ConnectionError extends Error {\n  constructor(params, message) {\n    super(message);\n    this.params = params;\n  }\n}\nexports.ConnectionError = ConnectionError;\nasync function createConnectionController(clock, params) {\n  let retry = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const preset = loadPreset(params);\n  // Try connect\n  while (true) {\n    try {\n      const controller = new ConnectionController(clock);\n      await controller.startSwitchingNetwork(preset).then(handle => handle.switch());\n      debugLog(`Successfully connected to ${preset.group}`);\n      return controller;\n    } catch (e) {\n      if (retry) {\n        console.error('Connection failed:', e);\n        await new Promise(resolve => {\n          setTimeout(() => resolve(), 5000);\n        });\n        debugLog('Restarting connection process');\n      } else {\n        throw e;\n      }\n    }\n  }\n}\nexports.createConnectionController = createConnectionController;\nclass ConnectionController {\n  constructor(clock) {\n    this._networkMutex = new await_semaphore_1.Mutex();\n    this._acquiredTransportCounter = 0;\n    this._clock = clock;\n  }\n  async acquire() {\n    requireInitializedTransport(this._initializedTransport);\n    await this._acquireTransport();\n    return {\n      transport: this._initializedTransport,\n      release: () => this._releaseTransport()\n    };\n  }\n  async use(f) {\n    requireInitializedTransport(this._initializedTransport);\n    await this._acquireTransport();\n    return f(this._initializedTransport).finally(() => {\n      this._releaseTransport();\n    });\n  }\n  async startSwitchingNetwork(params) {\n    var _a;\n    class NetworkSwitchHandle {\n      constructor(controller, release, params) {\n        this._controller = controller;\n        this._release = release;\n        this._params = params;\n      }\n      async switch() {\n        await this._controller._connect(this._params).finally(() => this._release());\n      }\n    }\n    (_a = this._cancelTestTransport) === null || _a === void 0 ? void 0 : _a.call(this);\n    const release = await this._networkMutex.acquire();\n    return new NetworkSwitchHandle(this, release, params);\n  }\n  get initializedTransport() {\n    return this._initializedTransport;\n  }\n  async _connect(params) {\n    if (this._initializedTransport != null) {\n      cleanupInitializedTransport(this._initializedTransport);\n    }\n    this._initializedTransport = undefined;\n    let TestConnectionResult;\n    (function (TestConnectionResult) {\n      TestConnectionResult[TestConnectionResult[\"DONE\"] = 0] = \"DONE\";\n      TestConnectionResult[TestConnectionResult[\"CANCELLED\"] = 1] = \"CANCELLED\";\n    })(TestConnectionResult || (TestConnectionResult = {}));\n    const testTransport = async (_ref, local) => {\n      let {\n        data: {\n          transport\n        }\n      } = _ref;\n      return new Promise((resolve, reject) => {\n        this._cancelTestTransport = () => resolve(TestConnectionResult.CANCELLED);\n        if (local) {\n          transport.getAccountsByCodeHash('4e92716de61d456e58f16e4e867e3e93a7548321eace86301b51c8b80ca6239b', 1).then(() => resolve(TestConnectionResult.DONE)).catch(e => reject(e));\n        } else {\n          // Try to get any account state\n          transport.getFullContractState('-1:0000000000000000000000000000000000000000000000000000000000000000').then(() => resolve(TestConnectionResult.DONE)).catch(e => reject(e));\n        }\n        setTimeout(() => reject(new Error('Connection timeout')), 10000);\n      }).finally(() => this._cancelTestTransport = undefined);\n    };\n    try {\n      const group = params.group != null ? params.group : matchNetworkGroup(params.id);\n      const {\n        local,\n        transportData\n      } = await (params.type === 'graphql' ? async () => {\n        const socket = new gql_1.GqlSocket();\n        const connection = await socket.connect(this._clock, params.data);\n        const transport = nekoton.Transport.fromGqlConnection(connection);\n        const transportData = {\n          id: params.id,\n          group,\n          type: 'graphql',\n          data: {\n            socket,\n            connection,\n            transport\n          }\n        };\n        return {\n          local: params.data.local === true,\n          transportData\n        };\n      } : async () => {\n        const socket = new jrpc_1.JrpcSocket();\n        const connection = await socket.connect(this._clock, params.data);\n        const transport = nekoton.Transport.fromJrpcConnection(connection);\n        const transportData = {\n          id: params.id,\n          group,\n          type: 'jrpc',\n          data: {\n            socket,\n            connection,\n            transport\n          }\n        };\n        return {\n          local: false,\n          transportData\n        };\n      })();\n      try {\n        if ((await testTransport(transportData, local)) == TestConnectionResult.CANCELLED) {\n          cleanupInitializedTransport(transportData);\n          return;\n        }\n      } catch (e) {\n        // Free transport data in case of error\n        cleanupInitializedTransport(transportData);\n        throw e;\n      }\n      this._initializedTransport = transportData;\n    } catch (e) {\n      throw new Error(`Failed to create connection: ${e.toString()}`);\n    }\n  }\n  async _acquireTransport() {\n    debugLog('_acquireTransport');\n    if (this._acquiredTransportCounter > 0) {\n      debugLog('_acquireTransport -> increase');\n      this._acquiredTransportCounter += 1;\n    } else {\n      this._acquiredTransportCounter = 1;\n      if (this._release != null) {\n        console.warn('mutex is already acquired');\n      } else {\n        debugLog('_acquireTransport -> await');\n        this._release = await this._networkMutex.acquire();\n        debugLog('_acquireTransport -> create');\n      }\n    }\n  }\n  _releaseTransport() {\n    var _a;\n    debugLog('_releaseTransport');\n    this._acquiredTransportCounter -= 1;\n    if (this._acquiredTransportCounter <= 0) {\n      debugLog('_releaseTransport -> release');\n      (_a = this._release) === null || _a === void 0 ? void 0 : _a.call(this);\n      this._release = undefined;\n    }\n  }\n}\nexports.ConnectionController = ConnectionController;\nfunction cleanupInitializedTransport(transport) {\n  transport.data.transport.free();\n  transport.data.connection.free();\n}\nfunction requireInitializedTransport(transport) {\n  if (transport == null) {\n    throw new Error('Connection is not initialized');\n  }\n}","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","ConnectionController","createConnectionController","ConnectionError","checkConnection","NETWORK_PRESETS","await_semaphore_1","require","core_1","gql_1","jrpc_1","nekoton","debugLog","default","mainnetJrpc","id","type","data","endpoint","fld","endpoints","local","matchNetworkGroup","loadPreset","params","targetPreset","Error","preset","clock","ClockWithOffset","controller","cleanupInitializedTransport","e","toString","free","constructor","message","retry","arguments","length","undefined","startSwitchingNetwork","then","handle","switch","group","console","error","Promise","resolve","setTimeout","_networkMutex","Mutex","_acquiredTransportCounter","_clock","acquire","requireInitializedTransport","_initializedTransport","_acquireTransport","transport","release","_releaseTransport","use","f","finally","_a","NetworkSwitchHandle","_controller","_release","_params","_connect","_cancelTestTransport","call","initializedTransport","TestConnectionResult","testTransport","_ref","reject","CANCELLED","getAccountsByCodeHash","DONE","catch","getFullContractState","transportData","socket","GqlSocket","connection","connect","Transport","fromGqlConnection","JrpcSocket","fromJrpcConnection","warn"],"sources":["/home/king/Desktop/venom-connect-main/examples/react/node_modules/everscale-standalone-client/client/ConnectionController/index.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectionController = exports.createConnectionController = exports.ConnectionError = exports.checkConnection = exports.NETWORK_PRESETS = void 0;\nconst await_semaphore_1 = require(\"@broxus/await-semaphore\");\nconst core_1 = __importDefault(require(\"../../core\"));\nconst gql_1 = require(\"./gql\");\nconst jrpc_1 = require(\"./jrpc\");\nconst { nekoton, debugLog } = core_1.default;\n/**\n * @category Client\n */\nexports.NETWORK_PRESETS = {\n    mainnetJrpc: {\n        id: 1,\n        type: 'jrpc',\n        data: {\n            endpoint: 'https://jrpc.everwallet.net/rpc',\n        },\n    },\n    fld: {\n        id: 10,\n        type: 'graphql',\n        data: {\n            endpoints: ['gql.custler.net'],\n            local: false,\n        },\n    },\n    local: {\n        id: 31337,\n        type: 'graphql',\n        data: {\n            endpoints: ['127.0.0.1'],\n            local: true,\n        },\n    },\n};\nconst matchNetworkGroup = (id) => {\n    switch (id) {\n        case 1:\n            return 'mainnet';\n        case 2:\n            return 'testnet';\n        case 10:\n            return 'fld';\n        case 31337:\n            return 'localnet';\n        default:\n            return `network${id}`;\n    }\n};\nfunction loadPreset(params) {\n    if (typeof params === 'string') {\n        const targetPreset = exports.NETWORK_PRESETS[params];\n        if (targetPreset == null) {\n            throw new Error(`Target preset id not found: ${params}`);\n        }\n        return targetPreset;\n    }\n    else {\n        return params;\n    }\n}\n/**\n * Tries to connect with the specified params. Throws an exception in case of error\n *\n * @category Client\n * @throws ConnectionError\n */\nasync function checkConnection(params) {\n    const preset = loadPreset(params);\n    const clock = new nekoton.ClockWithOffset();\n    try {\n        const controller = new ConnectionController(clock);\n        await controller['_connect'](preset);\n        if (controller['_initializedTransport'] != null) {\n            cleanupInitializedTransport(controller['_initializedTransport']);\n        }\n    }\n    catch (e) {\n        throw new ConnectionError(preset, e.toString());\n    }\n    finally {\n        clock.free();\n    }\n}\nexports.checkConnection = checkConnection;\n/**\n * @category Client\n */\nclass ConnectionError extends Error {\n    constructor(params, message) {\n        super(message);\n        this.params = params;\n    }\n}\nexports.ConnectionError = ConnectionError;\nasync function createConnectionController(clock, params, retry = false) {\n    const preset = loadPreset(params);\n    // Try connect\n    while (true) {\n        try {\n            const controller = new ConnectionController(clock);\n            await controller.startSwitchingNetwork(preset).then(handle => handle.switch());\n            debugLog(`Successfully connected to ${preset.group}`);\n            return controller;\n        }\n        catch (e) {\n            if (retry) {\n                console.error('Connection failed:', e);\n                await new Promise(resolve => {\n                    setTimeout(() => resolve(), 5000);\n                });\n                debugLog('Restarting connection process');\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n}\nexports.createConnectionController = createConnectionController;\nclass ConnectionController {\n    constructor(clock) {\n        this._networkMutex = new await_semaphore_1.Mutex();\n        this._acquiredTransportCounter = 0;\n        this._clock = clock;\n    }\n    async acquire() {\n        requireInitializedTransport(this._initializedTransport);\n        await this._acquireTransport();\n        return {\n            transport: this._initializedTransport,\n            release: () => this._releaseTransport(),\n        };\n    }\n    async use(f) {\n        requireInitializedTransport(this._initializedTransport);\n        await this._acquireTransport();\n        return f(this._initializedTransport).finally(() => {\n            this._releaseTransport();\n        });\n    }\n    async startSwitchingNetwork(params) {\n        var _a;\n        class NetworkSwitchHandle {\n            constructor(controller, release, params) {\n                this._controller = controller;\n                this._release = release;\n                this._params = params;\n            }\n            async switch() {\n                await this._controller._connect(this._params).finally(() => this._release());\n            }\n        }\n        (_a = this._cancelTestTransport) === null || _a === void 0 ? void 0 : _a.call(this);\n        const release = await this._networkMutex.acquire();\n        return new NetworkSwitchHandle(this, release, params);\n    }\n    get initializedTransport() {\n        return this._initializedTransport;\n    }\n    async _connect(params) {\n        if (this._initializedTransport != null) {\n            cleanupInitializedTransport(this._initializedTransport);\n        }\n        this._initializedTransport = undefined;\n        let TestConnectionResult;\n        (function (TestConnectionResult) {\n            TestConnectionResult[TestConnectionResult[\"DONE\"] = 0] = \"DONE\";\n            TestConnectionResult[TestConnectionResult[\"CANCELLED\"] = 1] = \"CANCELLED\";\n        })(TestConnectionResult || (TestConnectionResult = {}));\n        const testTransport = async ({ data: { transport } }, local) => {\n            return new Promise((resolve, reject) => {\n                this._cancelTestTransport = () => resolve(TestConnectionResult.CANCELLED);\n                if (local) {\n                    transport\n                        .getAccountsByCodeHash('4e92716de61d456e58f16e4e867e3e93a7548321eace86301b51c8b80ca6239b', 1)\n                        .then(() => resolve(TestConnectionResult.DONE))\n                        .catch((e) => reject(e));\n                }\n                else {\n                    // Try to get any account state\n                    transport\n                        .getFullContractState('-1:0000000000000000000000000000000000000000000000000000000000000000')\n                        .then(() => resolve(TestConnectionResult.DONE))\n                        .catch((e) => reject(e));\n                }\n                setTimeout(() => reject(new Error('Connection timeout')), 10000);\n            }).finally(() => (this._cancelTestTransport = undefined));\n        };\n        try {\n            const group = params.group != null ? params.group : matchNetworkGroup(params.id);\n            const { local, transportData } = await (params.type === 'graphql'\n                ? async () => {\n                    const socket = new gql_1.GqlSocket();\n                    const connection = await socket.connect(this._clock, params.data);\n                    const transport = nekoton.Transport.fromGqlConnection(connection);\n                    const transportData = {\n                        id: params.id,\n                        group,\n                        type: 'graphql',\n                        data: {\n                            socket,\n                            connection,\n                            transport,\n                        },\n                    };\n                    return {\n                        local: params.data.local === true,\n                        transportData,\n                    };\n                }\n                : async () => {\n                    const socket = new jrpc_1.JrpcSocket();\n                    const connection = await socket.connect(this._clock, params.data);\n                    const transport = nekoton.Transport.fromJrpcConnection(connection);\n                    const transportData = {\n                        id: params.id,\n                        group,\n                        type: 'jrpc',\n                        data: {\n                            socket,\n                            connection,\n                            transport,\n                        },\n                    };\n                    return {\n                        local: false,\n                        transportData,\n                    };\n                })();\n            try {\n                if ((await testTransport(transportData, local)) == TestConnectionResult.CANCELLED) {\n                    cleanupInitializedTransport(transportData);\n                    return;\n                }\n            }\n            catch (e) {\n                // Free transport data in case of error\n                cleanupInitializedTransport(transportData);\n                throw e;\n            }\n            this._initializedTransport = transportData;\n        }\n        catch (e) {\n            throw new Error(`Failed to create connection: ${e.toString()}`);\n        }\n    }\n    async _acquireTransport() {\n        debugLog('_acquireTransport');\n        if (this._acquiredTransportCounter > 0) {\n            debugLog('_acquireTransport -> increase');\n            this._acquiredTransportCounter += 1;\n        }\n        else {\n            this._acquiredTransportCounter = 1;\n            if (this._release != null) {\n                console.warn('mutex is already acquired');\n            }\n            else {\n                debugLog('_acquireTransport -> await');\n                this._release = await this._networkMutex.acquire();\n                debugLog('_acquireTransport -> create');\n            }\n        }\n    }\n    _releaseTransport() {\n        var _a;\n        debugLog('_releaseTransport');\n        this._acquiredTransportCounter -= 1;\n        if (this._acquiredTransportCounter <= 0) {\n            debugLog('_releaseTransport -> release');\n            (_a = this._release) === null || _a === void 0 ? void 0 : _a.call(this);\n            this._release = undefined;\n        }\n    }\n}\nexports.ConnectionController = ConnectionController;\nfunction cleanupInitializedTransport(transport) {\n    transport.data.transport.free();\n    transport.data.connection.free();\n}\nfunction requireInitializedTransport(transport) {\n    if (transport == null) {\n        throw new Error('Connection is not initialized');\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}