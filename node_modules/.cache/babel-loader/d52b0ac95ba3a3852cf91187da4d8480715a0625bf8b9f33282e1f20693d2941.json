{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProviderNotInitializedException = exports.ProviderNotFoundException = exports.ProviderRpcClient = exports.hasEverscaleProvider = exports.LT_COLLATOR = exports.isAddressObject = exports.mergeTransactions = exports.MessageExpiredException = exports.AddressLiteral = exports.Address = exports.Subscriber = void 0;\nconst models_1 = require(\"./models\");\nconst utils_1 = require(\"./utils\");\nconst subscriber = __importStar(require(\"./stream\"));\nconst contract = __importStar(require(\"./contract\"));\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./models\"), exports);\n__exportStar(require(\"./contract\"), exports);\nvar stream_1 = require(\"./stream\");\nObject.defineProperty(exports, \"Subscriber\", {\n  enumerable: true,\n  get: function () {\n    return stream_1.Subscriber;\n  }\n});\nvar utils_2 = require(\"./utils\");\nObject.defineProperty(exports, \"Address\", {\n  enumerable: true,\n  get: function () {\n    return utils_2.Address;\n  }\n});\nObject.defineProperty(exports, \"AddressLiteral\", {\n  enumerable: true,\n  get: function () {\n    return utils_2.AddressLiteral;\n  }\n});\nObject.defineProperty(exports, \"MessageExpiredException\", {\n  enumerable: true,\n  get: function () {\n    return utils_2.MessageExpiredException;\n  }\n});\nObject.defineProperty(exports, \"mergeTransactions\", {\n  enumerable: true,\n  get: function () {\n    return utils_2.mergeTransactions;\n  }\n});\nObject.defineProperty(exports, \"isAddressObject\", {\n  enumerable: true,\n  get: function () {\n    return utils_2.isAddressObject;\n  }\n});\nObject.defineProperty(exports, \"LT_COLLATOR\", {\n  enumerable: true,\n  get: function () {\n    return utils_2.LT_COLLATOR;\n  }\n});\nconst isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\nlet ensurePageLoaded;\nif (!isBrowser || document.readyState === 'complete') {\n  ensurePageLoaded = Promise.resolve();\n} else {\n  ensurePageLoaded = new Promise(resolve => {\n    window.addEventListener('load', () => {\n      resolve();\n    });\n  });\n}\nconst getProvider = () => isBrowser ? window.__ever || window.ton : undefined;\n/**\n * @category Provider\n */\nasync function hasEverscaleProvider() {\n  if (!isBrowser) {\n    return false;\n  }\n  await ensurePageLoaded;\n  return window.__hasEverscaleProvider === true || window.hasTonProvider === true;\n}\nexports.hasEverscaleProvider = hasEverscaleProvider;\n/**\n * @category Provider\n */\nclass ProviderRpcClient {\n  constructor() {\n    let properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._subscriptions = {\n      connected: new Map(),\n      disconnected: new Map(),\n      transactionsFound: new Map(),\n      contractStateChanged: new Map(),\n      messageStatusUpdated: new Map(),\n      networkChanged: new Map(),\n      permissionsChanged: new Map(),\n      loggedOut: new Map()\n    };\n    this._contractSubscriptions = new Map();\n    this._properties = properties;\n    const self = this;\n    // Create contract proxy type\n    class ProviderContract extends contract.Contract {\n      constructor(abi, address) {\n        super(self, abi, address);\n      }\n    }\n    this.Contract = ProviderContract;\n    // Create subscriber proxy type\n    class ProviderSubscriber extends subscriber.Subscriber {\n      constructor() {\n        super(self);\n      }\n    }\n    this.Subscriber = ProviderSubscriber;\n    // Wrap provider requests\n    this._api = new Proxy({}, {\n      get: (_object, method) => params => {\n        if (this._provider != null) {\n          return this._provider.request({\n            method,\n            params\n          });\n        } else {\n          throw new ProviderNotInitializedException();\n        }\n      }\n    });\n    if (properties.forceUseFallback === true) {\n      this._initializationPromise = properties.fallback != null ? properties.fallback().then(provider => {\n        this._provider = provider;\n      }) : Promise.resolve();\n    } else {\n      // Initialize provider with injected object by default\n      this._provider = getProvider();\n      if (this._provider != null) {\n        // Provider as already injected\n        this._initializationPromise = Promise.resolve();\n      } else {\n        // Wait until page is loaded and initialization complete\n        this._initializationPromise = hasEverscaleProvider().then(hasProvider => new Promise(resolve => {\n          if (!hasProvider) {\n            // Fully loaded page doesn't even contain provider flag\n            return resolve();\n          }\n          // Wait injected provider initialization otherwise\n          this._provider = getProvider();\n          if (this._provider != null) {\n            resolve();\n          } else {\n            const eventName = window.__hasEverscaleProvider === true ? 'ever#initialized' : 'ton#initialized';\n            window.addEventListener(eventName, _ => {\n              this._provider = getProvider();\n              resolve();\n            });\n          }\n        })).then(async () => {\n          if (this._provider == null && properties.fallback != null) {\n            this._provider = await properties.fallback();\n          }\n        });\n      }\n    }\n    // Will only register handlers for successfully loaded injected provider\n    this._initializationPromise.then(() => {\n      if (this._provider != null) {\n        this._registerEventHandlers(this._provider);\n      }\n    });\n  }\n  /**\n   * Checks whether this page has injected Everscale provider or\n   * there is a fallback provider.\n   */\n  async hasProvider() {\n    if (this._properties.fallback != null) {\n      return true;\n    }\n    return hasEverscaleProvider();\n  }\n  /**\n   * Waits until provider api will be available. Calls `fallback` if no provider was found\n   *\n   * @throws ProviderNotFoundException when no provider found\n   */\n  async ensureInitialized() {\n    await this._initializationPromise;\n    if (this._provider == null) {\n      throw new ProviderNotFoundException();\n    }\n  }\n  /**\n   * Whether provider api is ready\n   */\n  get isInitialized() {\n    return this._provider != null;\n  }\n  /**\n   * Raw provider\n   */\n  get raw() {\n    if (this._provider != null) {\n      return this._provider;\n    } else {\n      throw new ProviderNotInitializedException();\n    }\n  }\n  /**\n   * Raw provider api\n   */\n  get rawApi() {\n    return this._api;\n  }\n  /**\n   * Creates typed contract wrapper.\n   *\n   * @param abi Readonly object (must be declared with `as const`)\n   * @param address Default contract address\n   *\n   * @deprecated `new ever.Contract(abi, address)` should be used instead\n   */\n  createContract(abi, address) {\n    return new this.Contract(abi, address);\n  }\n  /**\n   * Creates subscriptions group\n   *\n   * @deprecated `new ever.Subscriber()` should be used instead\n   */\n  createSubscriber() {\n    return new this.Subscriber();\n  }\n  /**\n   * Requests new permissions for current origin.\n   * Shows an approval window to the user.\n   * Will overwrite already existing permissions\n   *\n   * ---\n   * Required permissions: none\n   */\n  async requestPermissions(args) {\n    await this.ensureInitialized();\n    const result = await this._api.requestPermissions({\n      permissions: args.permissions\n    });\n    return (0, models_1.parsePermissions)(result);\n  }\n  /**\n   * Updates `accountInteraction` permission value\n   *\n   * ---\n   * Requires permissions: `accountInteraction`\n   */\n  async changeAccount() {\n    await this.ensureInitialized();\n    await this._api.changeAccount();\n  }\n  /**\n   * Removes all permissions for current origin and stops all subscriptions\n   */\n  async disconnect() {\n    await this.ensureInitialized();\n    await this._api.disconnect();\n  }\n  async subscribe(eventName, params) {\n    class SubscriptionImpl {\n      constructor(_subscribe, _unsubscribe) {\n        this._subscribe = _subscribe;\n        this._unsubscribe = _unsubscribe;\n        this._listeners = {\n          data: [],\n          subscribed: [],\n          unsubscribed: []\n        };\n        this._subscribed = false;\n        this.subscribe = async () => {\n          if (this._subscribed) {\n            return;\n          }\n          this._subscribed = true;\n          await this._subscribe(this);\n          for (const handler of this._listeners['subscribed']) {\n            handler();\n          }\n        };\n        this.unsubscribe = async () => {\n          if (!this._subscribed) {\n            return;\n          }\n          this._subscribed = false;\n          await this._unsubscribe();\n          for (const handler of this._listeners['unsubscribed']) {\n            handler();\n          }\n        };\n      }\n      on(eventName, listener) {\n        this._listeners[eventName].push(listener);\n        return this;\n      }\n      notify(data) {\n        for (const handler of this._listeners['data']) {\n          handler(data);\n        }\n      }\n    }\n    const existingSubscriptions = this._subscriptions[eventName];\n    const id = (0, utils_1.getUniqueId)();\n    switch (eventName) {\n      case 'connected':\n      case 'disconnected':\n      case 'messageStatusUpdated':\n      case 'networkChanged':\n      case 'permissionsChanged':\n      case 'loggedOut':\n        {\n          const subscription = new SubscriptionImpl(async subscription => {\n            if (existingSubscriptions.has(id)) {\n              return;\n            }\n            existingSubscriptions.set(id, data => {\n              subscription.notify(data);\n            });\n          }, async () => {\n            existingSubscriptions.delete(id);\n          });\n          await subscription.subscribe();\n          return subscription;\n        }\n      case 'transactionsFound':\n      case 'contractStateChanged':\n        {\n          if (params == null) {\n            throw new Error('Address must be specified for the subscription');\n          }\n          await this.ensureInitialized();\n          const address = params.address.toString();\n          const subscription = new SubscriptionImpl(async subscription => {\n            if (existingSubscriptions.has(id)) {\n              return;\n            }\n            existingSubscriptions.set(id, data => {\n              if (data.address.toString() === address) {\n                subscription.notify(data);\n              }\n            });\n            let contractSubscriptions = this._contractSubscriptions.get(address);\n            if (contractSubscriptions == null) {\n              contractSubscriptions = new Map();\n              this._contractSubscriptions.set(address, contractSubscriptions);\n            }\n            const subscriptionState = {\n              state: eventName === 'contractStateChanged',\n              transactions: eventName === 'transactionsFound'\n            };\n            contractSubscriptions.set(id, subscriptionState);\n            const {\n              total,\n              withoutExcluded\n            } = foldSubscriptions(contractSubscriptions.values(), subscriptionState);\n            try {\n              if (total.transactions !== withoutExcluded.transactions || total.state !== withoutExcluded.state) {\n                await this.rawApi.subscribe({\n                  address,\n                  subscriptions: total\n                });\n              }\n            } catch (e) {\n              existingSubscriptions.delete(id);\n              contractSubscriptions.delete(id);\n              throw e;\n            }\n          }, async () => {\n            existingSubscriptions.delete(id);\n            const contractSubscriptions = this._contractSubscriptions.get(address);\n            if (contractSubscriptions == null) {\n              return;\n            }\n            const updates = contractSubscriptions.get(id);\n            const {\n              total,\n              withoutExcluded\n            } = foldSubscriptions(contractSubscriptions.values(), updates);\n            contractSubscriptions.delete(id);\n            if (!withoutExcluded.transactions && !withoutExcluded.state) {\n              await this.rawApi.unsubscribe({\n                address\n              });\n            } else if (total.transactions !== withoutExcluded.transactions || total.state !== withoutExcluded.state) {\n              await this.rawApi.subscribe({\n                address,\n                subscriptions: withoutExcluded\n              });\n            }\n          });\n          await subscription.subscribe();\n          return subscription;\n        }\n      default:\n        {\n          throw new Error(`Unknown event ${eventName}`);\n        }\n    }\n  }\n  /**\n   * Returns provider api state\n   *\n   * ---\n   * Required permissions: none\n   */\n  async getProviderState() {\n    await this.ensureInitialized();\n    const state = await this._api.getProviderState();\n    return {\n      ...state,\n      permissions: (0, models_1.parsePermissions)(state.permissions)\n    };\n  }\n  /**\n   * Requests contract balance\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async getBalance(address) {\n    const {\n      state\n    } = await this.getFullContractState({\n      address\n    });\n    return state == null ? '0' : state === null || state === void 0 ? void 0 : state.balance;\n  }\n  /**\n   * Requests contract data\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async getFullContractState(args) {\n    await this.ensureInitialized();\n    return await this._api.getFullContractState({\n      address: args.address.toString()\n    });\n  }\n  /**\n   * Requests accounts with specified code hash\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async getAccountsByCodeHash(args) {\n    await this.ensureInitialized();\n    const {\n      accounts,\n      continuation\n    } = await this._api.getAccountsByCodeHash({\n      ...args\n    });\n    return {\n      accounts: accounts.map(address => new utils_1.Address(address)),\n      continuation\n    };\n  }\n  /**\n   * Requests contract transactions\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async getTransactions(args) {\n    await this.ensureInitialized();\n    const {\n      transactions,\n      continuation,\n      info\n    } = await this._api.getTransactions({\n      ...args,\n      address: args.address.toString()\n    });\n    return {\n      transactions: transactions.map(models_1.parseTransaction),\n      continuation,\n      info\n    };\n  }\n  /**\n   * Searches transaction by hash\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async getTransaction(args) {\n    await this.ensureInitialized();\n    const {\n      transaction\n    } = await this._api.getTransaction({\n      ...args\n    });\n    return {\n      transaction: transaction ? (0, models_1.parseTransaction)(transaction) : undefined\n    };\n  }\n  /**\n   * Computes contract address from code and init params\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async getExpectedAddress(abi, args) {\n    const {\n      address\n    } = await this.getStateInit(abi, args);\n    return address;\n  }\n  /**\n   * Computes contract address and state from code and init params\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async getStateInit(abi, args) {\n    await this.ensureInitialized();\n    const {\n      address,\n      stateInit,\n      hash\n    } = await this._api.getExpectedAddress({\n      abi: JSON.stringify(abi),\n      ...args,\n      initParams: (0, models_1.serializeTokensObject)(args.initParams)\n    });\n    return {\n      address: new utils_1.Address(address),\n      stateInit,\n      hash\n    };\n  }\n  /**\n   * Decodes initial contract data using the specified ABI\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async unpackInitData(abi, data) {\n    await this.ensureInitialized();\n    const {\n      publicKey,\n      initParams\n    } = await this._api.unpackInitData({\n      abi: JSON.stringify(abi),\n      data\n    });\n    return {\n      publicKey,\n      initParams: (0, models_1.parsePartialTokensObject)(abi.data, initParams)\n    };\n  }\n  /**\n   * Computes hash of base64 encoded BOC\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async getBocHash(boc) {\n    await this.ensureInitialized();\n    return await this._api.getBocHash({\n      boc\n    }).then(_ref => {\n      let {\n        hash\n      } = _ref;\n      return hash;\n    });\n  }\n  /**\n   * Creates base64 encoded BOC\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async packIntoCell(args) {\n    await this.ensureInitialized();\n    return await this._api.packIntoCell({\n      abiVersion: args.abiVersion,\n      structure: args.structure,\n      data: (0, models_1.serializeTokensObject)(args.data)\n    });\n  }\n  /**\n   * Decodes base64 encoded BOC\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async unpackFromCell(args) {\n    await this.ensureInitialized();\n    const {\n      data\n    } = await this._api.unpackFromCell({\n      ...args,\n      structure: args.structure\n    });\n    return {\n      data: (0, models_1.parseTokensObject)(args.structure, data)\n    };\n  }\n  /**\n   * Extracts public key from raw account state\n   *\n   * **NOTE:** can only be used on contracts which are deployed and has `pubkey` header\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async extractPublicKey(boc) {\n    await this.ensureInitialized();\n    const {\n      publicKey\n    } = await this._api.extractPublicKey({\n      boc\n    });\n    return publicKey;\n  }\n  /**\n   * Converts base64 encoded contract code into tvc with default init data\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async codeToTvc(code) {\n    await this.ensureInitialized();\n    const {\n      tvc\n    } = await this._api.codeToTvc({\n      code\n    });\n    return tvc;\n  }\n  /**\n   * Merges code and data into state init\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async mergeTvc(args) {\n    await this.ensureInitialized();\n    return await this._api.mergeTvc(args);\n  }\n  /**\n   * Splits base64 encoded state init into code and data\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async splitTvc(tvc) {\n    await this.ensureInitialized();\n    return await this._api.splitTvc({\n      tvc\n    });\n  }\n  /**\n   * Merges code and data into state init\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async setCodeSalt(args) {\n    let salt;\n    if (typeof args.salt === 'string') {\n      await this.ensureInitialized();\n      salt = args.salt;\n    } else {\n      const {\n        boc\n      } = await this.packIntoCell(args.salt);\n      salt = boc;\n    }\n    return await this._api.setCodeSalt({\n      code: args.code,\n      salt\n    });\n  }\n  /**\n   * Retrieves salt from code. Returns undefined if code doesn't contain salt\n   *\n   * ---\n   * Required permissions: `basic`\n   */\n  async getCodeSalt(args) {\n    await this.ensureInitialized();\n    const {\n      salt\n    } = await this.rawApi.getCodeSalt({\n      code: args.code\n    });\n    return salt;\n  }\n  /**\n   * Adds asset to the selected account\n   *\n   * ---\n   * Requires permissions: `accountInteraction`\n   */\n  async addAsset(args) {\n    await this.ensureInitialized();\n    let params;\n    switch (args.type) {\n      case 'tip3_token':\n        {\n          params = {\n            rootContract: args.params.rootContract.toString()\n          };\n          break;\n        }\n      default:\n        throw new Error('Unknown asset type');\n    }\n    return await this._api.addAsset({\n      account: args.account.toString(),\n      type: args.type,\n      params\n    });\n  }\n  async verifySignature(args) {\n    await this.ensureInitialized();\n    return await this._api.verifySignature(args);\n  }\n  /**\n   * Signs arbitrary data.\n   *\n   * NOTE: hashes data before signing. Use `signDataRaw` to sign without hash.\n   *\n   * ---\n   * Requires permissions: `accountInteraction`\n   */\n  async signData(args) {\n    await this.ensureInitialized();\n    return await this._api.signData(args);\n  }\n  /**\n   * Signs arbitrary data without hashing it\n   *\n   * ---\n   * Requires permissions: `accountInteraction`\n   */\n  async signDataRaw(args) {\n    await this.ensureInitialized();\n    return await this._api.signDataRaw(args);\n  }\n  /**\n   * Encrypts arbitrary data with specified algorithm for each specified recipient\n   *\n   * ---\n   * Requires permissions: `accountInteraction`\n   */\n  async encryptData(args) {\n    await this.ensureInitialized();\n    const {\n      encryptedData\n    } = await this._api.encryptData(args);\n    return encryptedData;\n  }\n  /**\n   * Decrypts encrypted data. Returns base64 encoded data\n   *\n   * ---\n   * Requires permissions: `accountInteraction`\n   */\n  async decryptData(encryptedData) {\n    await this.ensureInitialized();\n    const {\n      data\n    } = await this._api.decryptData({\n      encryptedData\n    });\n    return data;\n  }\n  /**\n   * Sends an internal message from the user account.\n   * Shows an approval window to the user.\n   *\n   * ---\n   * Required permissions: `accountInteraction`\n   */\n  async sendMessage(args) {\n    await this.ensureInitialized();\n    const {\n      transaction\n    } = await this._api.sendMessage({\n      sender: args.sender.toString(),\n      recipient: args.recipient.toString(),\n      amount: args.amount,\n      bounce: args.bounce,\n      payload: args.payload ? {\n        abi: args.payload.abi,\n        method: args.payload.method,\n        params: (0, models_1.serializeTokensObject)(args.payload.params)\n      } : undefined,\n      stateInit: args.stateInit\n    });\n    return {\n      transaction: (0, models_1.parseTransaction)(transaction)\n    };\n  }\n  /**\n   * Sends an internal message from the user account without waiting for the transaction.\n   * Shows an approval window to the user.\n   *\n   * @see messageStatusUpdated\n   *\n   * ---\n   * Required permissions: `accountInteraction`\n   */\n  async sendMessageDelayed(args) {\n    await this.ensureInitialized();\n    const transactions = new utils_1.DelayedTransactions();\n    const subscription = await this.subscribe('messageStatusUpdated');\n    subscription.on('data', data => {\n      if (!data.address.equals(args.sender)) {\n        return;\n      }\n      transactions.fillTransaction(data.hash, data.transaction);\n    });\n    const {\n      message\n    } = await this._api.sendMessageDelayed({\n      sender: args.sender.toString(),\n      recipient: args.recipient.toString(),\n      amount: args.amount,\n      bounce: args.bounce,\n      payload: args.payload ? {\n        abi: args.payload.abi,\n        method: args.payload.method,\n        params: (0, models_1.serializeTokensObject)(args.payload.params)\n      } : undefined,\n      stateInit: args.stateInit\n    }).catch(e => {\n      subscription.unsubscribe().catch(console.error);\n      throw e;\n    });\n    const transaction = transactions.waitTransaction(args.sender, message.hash).finally(() => subscription.unsubscribe().catch(console.error));\n    return {\n      messageHash: message.hash,\n      expireAt: message.expireAt,\n      transaction\n    };\n  }\n  _registerEventHandlers(provider) {\n    const knownEvents = {\n      connected: data => data,\n      disconnected: data => data,\n      transactionsFound: data => ({\n        address: new utils_1.Address(data.address),\n        transactions: data.transactions.map(models_1.parseTransaction),\n        info: data.info\n      }),\n      contractStateChanged: data => ({\n        address: new utils_1.Address(data.address),\n        state: data.state\n      }),\n      messageStatusUpdated: data => ({\n        address: new utils_1.Address(data.address),\n        hash: data.hash,\n        transaction: data.transaction != null ? (0, models_1.parseTransaction)(data.transaction) : undefined\n      }),\n      networkChanged: data => data,\n      permissionsChanged: data => ({\n        permissions: (0, models_1.parsePermissions)(data.permissions)\n      }),\n      loggedOut: data => data\n    };\n    for (const [eventName, extractor] of Object.entries(knownEvents)) {\n      provider.addListener(eventName, data => {\n        const handlers = this._subscriptions[eventName];\n        const parsed = extractor(data);\n        for (const handler of handlers.values()) {\n          handler(parsed);\n        }\n      });\n    }\n  }\n}\nexports.ProviderRpcClient = ProviderRpcClient;\n/**\n * @category Provider\n */\nclass ProviderNotFoundException extends Error {\n  constructor() {\n    super('Everscale provider was not found');\n  }\n}\nexports.ProviderNotFoundException = ProviderNotFoundException;\n/**\n * @category Provider\n */\nclass ProviderNotInitializedException extends Error {\n  constructor() {\n    super('Everscale provider was not initialized yet');\n  }\n}\nexports.ProviderNotInitializedException = ProviderNotInitializedException;\nfunction foldSubscriptions(subscriptions, except) {\n  const total = {\n    state: false,\n    transactions: false\n  };\n  const withoutExcluded = Object.assign({}, total);\n  for (const item of subscriptions) {\n    if (withoutExcluded.transactions && withoutExcluded.state) {\n      break;\n    }\n    total.state || (total.state = item.state);\n    total.transactions || (total.transactions = item.transactions);\n    if (item !== except) {\n      withoutExcluded.state || (withoutExcluded.state = item.state);\n      withoutExcluded.transactions || (withoutExcluded.transactions = item.transactions);\n    }\n  }\n  return {\n    total,\n    withoutExcluded\n  };\n}","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__exportStar","exports","p","ProviderNotInitializedException","ProviderNotFoundException","ProviderRpcClient","hasEverscaleProvider","LT_COLLATOR","isAddressObject","mergeTransactions","MessageExpiredException","AddressLiteral","Address","Subscriber","models_1","require","utils_1","subscriber","contract","stream_1","utils_2","isBrowser","window","document","ensurePageLoaded","readyState","Promise","resolve","addEventListener","getProvider","__ever","ton","__hasEverscaleProvider","hasTonProvider","constructor","properties","arguments","length","_subscriptions","connected","Map","disconnected","transactionsFound","contractStateChanged","messageStatusUpdated","networkChanged","permissionsChanged","loggedOut","_contractSubscriptions","_properties","self","ProviderContract","Contract","abi","address","ProviderSubscriber","_api","Proxy","_object","method","params","_provider","request","forceUseFallback","_initializationPromise","fallback","then","provider","hasProvider","eventName","_","_registerEventHandlers","ensureInitialized","isInitialized","raw","rawApi","createContract","createSubscriber","requestPermissions","args","permissions","parsePermissions","changeAccount","disconnect","subscribe","SubscriptionImpl","_subscribe","_unsubscribe","_listeners","data","subscribed","unsubscribed","_subscribed","handler","unsubscribe","on","listener","push","notify","existingSubscriptions","id","getUniqueId","subscription","has","set","delete","Error","toString","contractSubscriptions","subscriptionState","state","transactions","total","withoutExcluded","foldSubscriptions","values","subscriptions","e","updates","getProviderState","getBalance","getFullContractState","balance","getAccountsByCodeHash","accounts","continuation","map","getTransactions","info","parseTransaction","getTransaction","transaction","getExpectedAddress","getStateInit","stateInit","hash","JSON","stringify","initParams","serializeTokensObject","unpackInitData","publicKey","parsePartialTokensObject","getBocHash","boc","_ref","packIntoCell","abiVersion","structure","unpackFromCell","parseTokensObject","extractPublicKey","codeToTvc","code","tvc","mergeTvc","splitTvc","setCodeSalt","salt","getCodeSalt","addAsset","type","rootContract","account","verifySignature","signData","signDataRaw","encryptData","encryptedData","decryptData","sendMessage","sender","recipient","amount","bounce","payload","sendMessageDelayed","DelayedTransactions","equals","fillTransaction","message","catch","console","error","waitTransaction","finally","messageHash","expireAt","knownEvents","extractor","entries","addListener","handlers","parsed","except","assign","item"],"sources":["/home/king/Desktop/venom-connect-main/examples/react/node_modules/everscale-inpage-provider/dist/index.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProviderNotInitializedException = exports.ProviderNotFoundException = exports.ProviderRpcClient = exports.hasEverscaleProvider = exports.LT_COLLATOR = exports.isAddressObject = exports.mergeTransactions = exports.MessageExpiredException = exports.AddressLiteral = exports.Address = exports.Subscriber = void 0;\nconst models_1 = require(\"./models\");\nconst utils_1 = require(\"./utils\");\nconst subscriber = __importStar(require(\"./stream\"));\nconst contract = __importStar(require(\"./contract\"));\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./models\"), exports);\n__exportStar(require(\"./contract\"), exports);\nvar stream_1 = require(\"./stream\");\nObject.defineProperty(exports, \"Subscriber\", { enumerable: true, get: function () { return stream_1.Subscriber; } });\nvar utils_2 = require(\"./utils\");\nObject.defineProperty(exports, \"Address\", { enumerable: true, get: function () { return utils_2.Address; } });\nObject.defineProperty(exports, \"AddressLiteral\", { enumerable: true, get: function () { return utils_2.AddressLiteral; } });\nObject.defineProperty(exports, \"MessageExpiredException\", { enumerable: true, get: function () { return utils_2.MessageExpiredException; } });\nObject.defineProperty(exports, \"mergeTransactions\", { enumerable: true, get: function () { return utils_2.mergeTransactions; } });\nObject.defineProperty(exports, \"isAddressObject\", { enumerable: true, get: function () { return utils_2.isAddressObject; } });\nObject.defineProperty(exports, \"LT_COLLATOR\", { enumerable: true, get: function () { return utils_2.LT_COLLATOR; } });\nconst isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\nlet ensurePageLoaded;\nif (!isBrowser || document.readyState === 'complete') {\n    ensurePageLoaded = Promise.resolve();\n}\nelse {\n    ensurePageLoaded = new Promise(resolve => {\n        window.addEventListener('load', () => {\n            resolve();\n        });\n    });\n}\nconst getProvider = () => (isBrowser ? window.__ever || window.ton : undefined);\n/**\n * @category Provider\n */\nasync function hasEverscaleProvider() {\n    if (!isBrowser) {\n        return false;\n    }\n    await ensurePageLoaded;\n    return window.__hasEverscaleProvider === true || window.hasTonProvider === true;\n}\nexports.hasEverscaleProvider = hasEverscaleProvider;\n/**\n * @category Provider\n */\nclass ProviderRpcClient {\n    constructor(properties = {}) {\n        this._subscriptions = {\n            connected: new Map(),\n            disconnected: new Map(),\n            transactionsFound: new Map(),\n            contractStateChanged: new Map(),\n            messageStatusUpdated: new Map(),\n            networkChanged: new Map(),\n            permissionsChanged: new Map(),\n            loggedOut: new Map(),\n        };\n        this._contractSubscriptions = new Map();\n        this._properties = properties;\n        const self = this;\n        // Create contract proxy type\n        class ProviderContract extends contract.Contract {\n            constructor(abi, address) {\n                super(self, abi, address);\n            }\n        }\n        this.Contract = ProviderContract;\n        // Create subscriber proxy type\n        class ProviderSubscriber extends subscriber.Subscriber {\n            constructor() {\n                super(self);\n            }\n        }\n        this.Subscriber = ProviderSubscriber;\n        // Wrap provider requests\n        this._api = new Proxy({}, {\n            get: (_object, method) => (params) => {\n                if (this._provider != null) {\n                    return this._provider.request({ method, params });\n                }\n                else {\n                    throw new ProviderNotInitializedException();\n                }\n            },\n        });\n        if (properties.forceUseFallback === true) {\n            this._initializationPromise =\n                properties.fallback != null\n                    ? properties.fallback().then(provider => {\n                        this._provider = provider;\n                    })\n                    : Promise.resolve();\n        }\n        else {\n            // Initialize provider with injected object by default\n            this._provider = getProvider();\n            if (this._provider != null) {\n                // Provider as already injected\n                this._initializationPromise = Promise.resolve();\n            }\n            else {\n                // Wait until page is loaded and initialization complete\n                this._initializationPromise = hasEverscaleProvider()\n                    .then(hasProvider => new Promise(resolve => {\n                    if (!hasProvider) {\n                        // Fully loaded page doesn't even contain provider flag\n                        return resolve();\n                    }\n                    // Wait injected provider initialization otherwise\n                    this._provider = getProvider();\n                    if (this._provider != null) {\n                        resolve();\n                    }\n                    else {\n                        const eventName = window.__hasEverscaleProvider === true ? 'ever#initialized' : 'ton#initialized';\n                        window.addEventListener(eventName, _ => {\n                            this._provider = getProvider();\n                            resolve();\n                        });\n                    }\n                }))\n                    .then(async () => {\n                    if (this._provider == null && properties.fallback != null) {\n                        this._provider = await properties.fallback();\n                    }\n                });\n            }\n        }\n        // Will only register handlers for successfully loaded injected provider\n        this._initializationPromise.then(() => {\n            if (this._provider != null) {\n                this._registerEventHandlers(this._provider);\n            }\n        });\n    }\n    /**\n     * Checks whether this page has injected Everscale provider or\n     * there is a fallback provider.\n     */\n    async hasProvider() {\n        if (this._properties.fallback != null) {\n            return true;\n        }\n        return hasEverscaleProvider();\n    }\n    /**\n     * Waits until provider api will be available. Calls `fallback` if no provider was found\n     *\n     * @throws ProviderNotFoundException when no provider found\n     */\n    async ensureInitialized() {\n        await this._initializationPromise;\n        if (this._provider == null) {\n            throw new ProviderNotFoundException();\n        }\n    }\n    /**\n     * Whether provider api is ready\n     */\n    get isInitialized() {\n        return this._provider != null;\n    }\n    /**\n     * Raw provider\n     */\n    get raw() {\n        if (this._provider != null) {\n            return this._provider;\n        }\n        else {\n            throw new ProviderNotInitializedException();\n        }\n    }\n    /**\n     * Raw provider api\n     */\n    get rawApi() {\n        return this._api;\n    }\n    /**\n     * Creates typed contract wrapper.\n     *\n     * @param abi Readonly object (must be declared with `as const`)\n     * @param address Default contract address\n     *\n     * @deprecated `new ever.Contract(abi, address)` should be used instead\n     */\n    createContract(abi, address) {\n        return new this.Contract(abi, address);\n    }\n    /**\n     * Creates subscriptions group\n     *\n     * @deprecated `new ever.Subscriber()` should be used instead\n     */\n    createSubscriber() {\n        return new this.Subscriber();\n    }\n    /**\n     * Requests new permissions for current origin.\n     * Shows an approval window to the user.\n     * Will overwrite already existing permissions\n     *\n     * ---\n     * Required permissions: none\n     */\n    async requestPermissions(args) {\n        await this.ensureInitialized();\n        const result = await this._api.requestPermissions({\n            permissions: args.permissions,\n        });\n        return (0, models_1.parsePermissions)(result);\n    }\n    /**\n     * Updates `accountInteraction` permission value\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async changeAccount() {\n        await this.ensureInitialized();\n        await this._api.changeAccount();\n    }\n    /**\n     * Removes all permissions for current origin and stops all subscriptions\n     */\n    async disconnect() {\n        await this.ensureInitialized();\n        await this._api.disconnect();\n    }\n    async subscribe(eventName, params) {\n        class SubscriptionImpl {\n            constructor(_subscribe, _unsubscribe) {\n                this._subscribe = _subscribe;\n                this._unsubscribe = _unsubscribe;\n                this._listeners = {\n                    data: [],\n                    subscribed: [],\n                    unsubscribed: [],\n                };\n                this._subscribed = false;\n                this.subscribe = async () => {\n                    if (this._subscribed) {\n                        return;\n                    }\n                    this._subscribed = true;\n                    await this._subscribe(this);\n                    for (const handler of this._listeners['subscribed']) {\n                        handler();\n                    }\n                };\n                this.unsubscribe = async () => {\n                    if (!this._subscribed) {\n                        return;\n                    }\n                    this._subscribed = false;\n                    await this._unsubscribe();\n                    for (const handler of this._listeners['unsubscribed']) {\n                        handler();\n                    }\n                };\n            }\n            on(eventName, listener) {\n                this._listeners[eventName].push(listener);\n                return this;\n            }\n            notify(data) {\n                for (const handler of this._listeners['data']) {\n                    handler(data);\n                }\n            }\n        }\n        const existingSubscriptions = this._subscriptions[eventName];\n        const id = (0, utils_1.getUniqueId)();\n        switch (eventName) {\n            case 'connected':\n            case 'disconnected':\n            case 'messageStatusUpdated':\n            case 'networkChanged':\n            case 'permissionsChanged':\n            case 'loggedOut': {\n                const subscription = new SubscriptionImpl(async (subscription) => {\n                    if (existingSubscriptions.has(id)) {\n                        return;\n                    }\n                    existingSubscriptions.set(id, data => {\n                        subscription.notify(data);\n                    });\n                }, async () => {\n                    existingSubscriptions.delete(id);\n                });\n                await subscription.subscribe();\n                return subscription;\n            }\n            case 'transactionsFound':\n            case 'contractStateChanged': {\n                if (params == null) {\n                    throw new Error('Address must be specified for the subscription');\n                }\n                await this.ensureInitialized();\n                const address = params.address.toString();\n                const subscription = new SubscriptionImpl(async (subscription) => {\n                    if (existingSubscriptions.has(id)) {\n                        return;\n                    }\n                    existingSubscriptions.set(id, ((data) => {\n                        if (data.address.toString() === address) {\n                            subscription.notify(data);\n                        }\n                    }));\n                    let contractSubscriptions = this._contractSubscriptions.get(address);\n                    if (contractSubscriptions == null) {\n                        contractSubscriptions = new Map();\n                        this._contractSubscriptions.set(address, contractSubscriptions);\n                    }\n                    const subscriptionState = {\n                        state: eventName === 'contractStateChanged',\n                        transactions: eventName === 'transactionsFound',\n                    };\n                    contractSubscriptions.set(id, subscriptionState);\n                    const { total, withoutExcluded } = foldSubscriptions(contractSubscriptions.values(), subscriptionState);\n                    try {\n                        if (total.transactions !== withoutExcluded.transactions || total.state !== withoutExcluded.state) {\n                            await this.rawApi.subscribe({ address, subscriptions: total });\n                        }\n                    }\n                    catch (e) {\n                        existingSubscriptions.delete(id);\n                        contractSubscriptions.delete(id);\n                        throw e;\n                    }\n                }, async () => {\n                    existingSubscriptions.delete(id);\n                    const contractSubscriptions = this._contractSubscriptions.get(address);\n                    if (contractSubscriptions == null) {\n                        return;\n                    }\n                    const updates = contractSubscriptions.get(id);\n                    const { total, withoutExcluded } = foldSubscriptions(contractSubscriptions.values(), updates);\n                    contractSubscriptions.delete(id);\n                    if (!withoutExcluded.transactions && !withoutExcluded.state) {\n                        await this.rawApi.unsubscribe({ address });\n                    }\n                    else if (total.transactions !== withoutExcluded.transactions || total.state !== withoutExcluded.state) {\n                        await this.rawApi.subscribe({ address, subscriptions: withoutExcluded });\n                    }\n                });\n                await subscription.subscribe();\n                return subscription;\n            }\n            default: {\n                throw new Error(`Unknown event ${eventName}`);\n            }\n        }\n    }\n    /**\n     * Returns provider api state\n     *\n     * ---\n     * Required permissions: none\n     */\n    async getProviderState() {\n        await this.ensureInitialized();\n        const state = await this._api.getProviderState();\n        return {\n            ...state,\n            permissions: (0, models_1.parsePermissions)(state.permissions),\n        };\n    }\n    /**\n     * Requests contract balance\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getBalance(address) {\n        const { state } = await this.getFullContractState({\n            address,\n        });\n        return state == null ? '0' : state === null || state === void 0 ? void 0 : state.balance;\n    }\n    /**\n     * Requests contract data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getFullContractState(args) {\n        await this.ensureInitialized();\n        return (await this._api.getFullContractState({\n            address: args.address.toString(),\n        }));\n    }\n    /**\n     * Requests accounts with specified code hash\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getAccountsByCodeHash(args) {\n        await this.ensureInitialized();\n        const { accounts, continuation } = await this._api.getAccountsByCodeHash({\n            ...args,\n        });\n        return {\n            accounts: accounts.map(address => new utils_1.Address(address)),\n            continuation,\n        };\n    }\n    /**\n     * Requests contract transactions\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getTransactions(args) {\n        await this.ensureInitialized();\n        const { transactions, continuation, info } = await this._api.getTransactions({\n            ...args,\n            address: args.address.toString(),\n        });\n        return {\n            transactions: transactions.map(models_1.parseTransaction),\n            continuation,\n            info,\n        };\n    }\n    /**\n     * Searches transaction by hash\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getTransaction(args) {\n        await this.ensureInitialized();\n        const { transaction } = await this._api.getTransaction({\n            ...args,\n        });\n        return {\n            transaction: transaction ? (0, models_1.parseTransaction)(transaction) : undefined,\n        };\n    }\n    /**\n     * Computes contract address from code and init params\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getExpectedAddress(abi, args) {\n        const { address } = await this.getStateInit(abi, args);\n        return address;\n    }\n    /**\n     * Computes contract address and state from code and init params\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getStateInit(abi, args) {\n        await this.ensureInitialized();\n        const { address, stateInit, hash } = await this._api.getExpectedAddress({\n            abi: JSON.stringify(abi),\n            ...args,\n            initParams: (0, models_1.serializeTokensObject)(args.initParams),\n        });\n        return {\n            address: new utils_1.Address(address),\n            stateInit,\n            hash,\n        };\n    }\n    /**\n     * Decodes initial contract data using the specified ABI\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async unpackInitData(abi, data) {\n        await this.ensureInitialized();\n        const { publicKey, initParams } = await this._api.unpackInitData({\n            abi: JSON.stringify(abi),\n            data,\n        });\n        return {\n            publicKey,\n            initParams: (0, models_1.parsePartialTokensObject)(abi.data, initParams),\n        };\n    }\n    /**\n     * Computes hash of base64 encoded BOC\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getBocHash(boc) {\n        await this.ensureInitialized();\n        return await this._api\n            .getBocHash({\n            boc,\n        })\n            .then(({ hash }) => hash);\n    }\n    /**\n     * Creates base64 encoded BOC\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async packIntoCell(args) {\n        await this.ensureInitialized();\n        return (await this._api.packIntoCell({\n            abiVersion: args.abiVersion,\n            structure: args.structure,\n            data: (0, models_1.serializeTokensObject)(args.data),\n        }));\n    }\n    /**\n     * Decodes base64 encoded BOC\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async unpackFromCell(args) {\n        await this.ensureInitialized();\n        const { data } = await this._api.unpackFromCell({\n            ...args,\n            structure: args.structure,\n        });\n        return {\n            data: (0, models_1.parseTokensObject)(args.structure, data),\n        };\n    }\n    /**\n     * Extracts public key from raw account state\n     *\n     * **NOTE:** can only be used on contracts which are deployed and has `pubkey` header\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async extractPublicKey(boc) {\n        await this.ensureInitialized();\n        const { publicKey } = await this._api.extractPublicKey({\n            boc,\n        });\n        return publicKey;\n    }\n    /**\n     * Converts base64 encoded contract code into tvc with default init data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async codeToTvc(code) {\n        await this.ensureInitialized();\n        const { tvc } = await this._api.codeToTvc({\n            code,\n        });\n        return tvc;\n    }\n    /**\n     * Merges code and data into state init\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async mergeTvc(args) {\n        await this.ensureInitialized();\n        return await this._api.mergeTvc(args);\n    }\n    /**\n     * Splits base64 encoded state init into code and data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async splitTvc(tvc) {\n        await this.ensureInitialized();\n        return await this._api.splitTvc({\n            tvc,\n        });\n    }\n    /**\n     * Merges code and data into state init\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async setCodeSalt(args) {\n        let salt;\n        if (typeof args.salt === 'string') {\n            await this.ensureInitialized();\n            salt = args.salt;\n        }\n        else {\n            const { boc } = await this.packIntoCell(args.salt);\n            salt = boc;\n        }\n        return await this._api.setCodeSalt({ code: args.code, salt });\n    }\n    /**\n     * Retrieves salt from code. Returns undefined if code doesn't contain salt\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getCodeSalt(args) {\n        await this.ensureInitialized();\n        const { salt } = await this.rawApi.getCodeSalt({\n            code: args.code,\n        });\n        return salt;\n    }\n    /**\n     * Adds asset to the selected account\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async addAsset(args) {\n        await this.ensureInitialized();\n        let params;\n        switch (args.type) {\n            case 'tip3_token': {\n                params = {\n                    rootContract: args.params.rootContract.toString(),\n                };\n                break;\n            }\n            default:\n                throw new Error('Unknown asset type');\n        }\n        return await this._api.addAsset({\n            account: args.account.toString(),\n            type: args.type,\n            params,\n        });\n    }\n    async verifySignature(args) {\n        await this.ensureInitialized();\n        return await this._api.verifySignature(args);\n    }\n    /**\n     * Signs arbitrary data.\n     *\n     * NOTE: hashes data before signing. Use `signDataRaw` to sign without hash.\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async signData(args) {\n        await this.ensureInitialized();\n        return await this._api.signData(args);\n    }\n    /**\n     * Signs arbitrary data without hashing it\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async signDataRaw(args) {\n        await this.ensureInitialized();\n        return await this._api.signDataRaw(args);\n    }\n    /**\n     * Encrypts arbitrary data with specified algorithm for each specified recipient\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async encryptData(args) {\n        await this.ensureInitialized();\n        const { encryptedData } = await this._api.encryptData(args);\n        return encryptedData;\n    }\n    /**\n     * Decrypts encrypted data. Returns base64 encoded data\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async decryptData(encryptedData) {\n        await this.ensureInitialized();\n        const { data } = await this._api.decryptData({ encryptedData });\n        return data;\n    }\n    /**\n     * Sends an internal message from the user account.\n     * Shows an approval window to the user.\n     *\n     * ---\n     * Required permissions: `accountInteraction`\n     */\n    async sendMessage(args) {\n        await this.ensureInitialized();\n        const { transaction } = await this._api.sendMessage({\n            sender: args.sender.toString(),\n            recipient: args.recipient.toString(),\n            amount: args.amount,\n            bounce: args.bounce,\n            payload: args.payload\n                ? {\n                    abi: args.payload.abi,\n                    method: args.payload.method,\n                    params: (0, models_1.serializeTokensObject)(args.payload.params),\n                }\n                : undefined,\n            stateInit: args.stateInit,\n        });\n        return {\n            transaction: (0, models_1.parseTransaction)(transaction),\n        };\n    }\n    /**\n     * Sends an internal message from the user account without waiting for the transaction.\n     * Shows an approval window to the user.\n     *\n     * @see messageStatusUpdated\n     *\n     * ---\n     * Required permissions: `accountInteraction`\n     */\n    async sendMessageDelayed(args) {\n        await this.ensureInitialized();\n        const transactions = new utils_1.DelayedTransactions();\n        const subscription = await this.subscribe('messageStatusUpdated');\n        subscription.on('data', data => {\n            if (!data.address.equals(args.sender)) {\n                return;\n            }\n            transactions.fillTransaction(data.hash, data.transaction);\n        });\n        const { message } = await this._api\n            .sendMessageDelayed({\n            sender: args.sender.toString(),\n            recipient: args.recipient.toString(),\n            amount: args.amount,\n            bounce: args.bounce,\n            payload: args.payload\n                ? {\n                    abi: args.payload.abi,\n                    method: args.payload.method,\n                    params: (0, models_1.serializeTokensObject)(args.payload.params),\n                }\n                : undefined,\n            stateInit: args.stateInit,\n        })\n            .catch(e => {\n            subscription.unsubscribe().catch(console.error);\n            throw e;\n        });\n        const transaction = transactions\n            .waitTransaction(args.sender, message.hash)\n            .finally(() => subscription.unsubscribe().catch(console.error));\n        return {\n            messageHash: message.hash,\n            expireAt: message.expireAt,\n            transaction,\n        };\n    }\n    _registerEventHandlers(provider) {\n        const knownEvents = {\n            connected: data => data,\n            disconnected: data => data,\n            transactionsFound: data => ({\n                address: new utils_1.Address(data.address),\n                transactions: data.transactions.map(models_1.parseTransaction),\n                info: data.info,\n            }),\n            contractStateChanged: data => ({\n                address: new utils_1.Address(data.address),\n                state: data.state,\n            }),\n            messageStatusUpdated: data => ({\n                address: new utils_1.Address(data.address),\n                hash: data.hash,\n                transaction: data.transaction != null ? (0, models_1.parseTransaction)(data.transaction) : undefined,\n            }),\n            networkChanged: data => data,\n            permissionsChanged: data => ({\n                permissions: (0, models_1.parsePermissions)(data.permissions),\n            }),\n            loggedOut: data => data,\n        };\n        for (const [eventName, extractor] of Object.entries(knownEvents)) {\n            provider.addListener(eventName, data => {\n                const handlers = this._subscriptions[eventName];\n                const parsed = extractor(data);\n                for (const handler of handlers.values()) {\n                    handler(parsed);\n                }\n            });\n        }\n    }\n}\nexports.ProviderRpcClient = ProviderRpcClient;\n/**\n * @category Provider\n */\nclass ProviderNotFoundException extends Error {\n    constructor() {\n        super('Everscale provider was not found');\n    }\n}\nexports.ProviderNotFoundException = ProviderNotFoundException;\n/**\n * @category Provider\n */\nclass ProviderNotInitializedException extends Error {\n    constructor() {\n        super('Everscale provider was not initialized yet');\n    }\n}\nexports.ProviderNotInitializedException = ProviderNotInitializedException;\nfunction foldSubscriptions(subscriptions, except) {\n    const total = { state: false, transactions: false };\n    const withoutExcluded = Object.assign({}, total);\n    for (const item of subscriptions) {\n        if (withoutExcluded.transactions && withoutExcluded.state) {\n            break;\n        }\n        total.state || (total.state = item.state);\n        total.transactions || (total.transactions = item.transactions);\n        if (item !== except) {\n            withoutExcluded.state || (withoutExcluded.state = item.state);\n            withoutExcluded.transactions || (withoutExcluded.transactions = item.transactions);\n        }\n    }\n    return { total, withoutExcluded };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}